const BINLangCompilerNew=function(e,t="arraybuffer"){const r=[1],n=e.match(/\[[A-Z0-9]+\]|"([^"\n\\]|\\([0-9]+|[^ 0-9\n\t]))+"|[a-zA-Z_]+|-?[0-9]+(\.[0-9]*)?|[\n;](?:[\n;]*)|[^ \t]/gms),a=n.length>>>0,s=255,o=65536,i={UINT8:0,UINT16:1,INT8:2,UFLOAT16:3,UTF8STRING:4,BOOLEAN:10},h={n:10,t:9,"\\":92},c={0:"Ending the string using a nullish character is NOT recommended! You should use the end of the string literal instead!",65536:"This character (CHAR) cannot be escaped yet. Since this issue occurred, the unexpected escape sequence will be replaced with a null character to terminate the string."},l={STANDARD:0,INTEGER:1,NONE:2};let u,f,d=0,p=0,T={},w=0,y=0;function N(e,t=!1){if(T[e])return T[e];const r=1+(w>>8)>>>0,n=[];let a=w;for(let e=0;e!==r;e++,e>>>=0)n.push(Math.min(s,a)),a-=256;return t?(T[e]=new Uint8Array(n),w++,T[e]):new Uint8Array(n)}let g=0;for(;g!==a;g++,g>>>=0)if(u=n[g],0===d)switch(u){case"\n":case";":p++,p>>>=0;break;case"SET":d=1,r.push(0);break;case"COM":d=3;break;case"MCOM":d=2;break;case void 0:g=a-1;break;default:throw new SyntaxError("Unexpected token '"+u+"'")}else if(1===d){if(0===y)r.push(...N(u,!0),0),y=1;else if(1===y){if("["!==u[0]||"]"!==u[u.length-1])throw new SyntaxError("The type has to be bracketed to signify that '"+u+"' is a proper type.");const e=i[u.slice(1,-1)];if(void 0===e)throw new TypeError(u+" is not a valid type. The current types available are [UINT8], [UINT16], [INT8], [UFLOAT16], [UTF8STRING], [UTF16STRING], and [BOOLEAN].");r.push(e),y=e+2+(4===e?2:0)>>>0}else if(2===y||4===y)r.push(Math.max(2===y?0:-128,Math.min(+u+(2===y?0:128),s))>>>0),y=0,d=0;else if(3===y){const e=Math.max(Math.min(s,+u),0);r.push(e%256>>>0,e>>8),y=0,d=0}else if(5===y){let e=Math.max(Math.min(+u,s),0),t=e%1*256>>>0;e>>>=0,r.push(e,t),y=0,d=0}else if(6===y){const e=u.slice(1,-1),t=e.length;let n=0,a=!0;if(0===f){let i=0;for(;i<t;i++,i>>>=0){if(n=("\\"===e[i]?h[e[1+i++]||o]:e.charCodeAt(i))>>>0,n>s)throw new TypeError("Found a character outside of the UTF8 range: '"+e[i]+"'. If you need to use a character outside of the UTF8 range, please use the [UTF16STRING] type.");if(0===n||n===o){console.warn(0===n?c[n]:c[n].replace(/CHAR/,e[i])),r.push(n),a=!1;break}r.push(n)}}else if(1===f){let i=0;for(;i!==t;i++,i>>>=0){if(n=("\\"===e[i]?o:e.charCodeAt(i))>>>0,n===o)if(isNaN(Number(e[i+1])))console.warn("An empty escaper can be removed from the string entirely, since there is no character to represent");else{i++;let t="";for(;!isNaN(Number(e[i]));i++,i>>>=0)t+=e[i];i--,n=Number(t)}if(n>s&&"\\"!==e[i])throw new TypeError("Found a character outside of the UTF8 range: '"+e[i]+"'. If you need to use a character outside of the UTF8 range, please use the [UTF16STRING] type.");if(0===n){console.warn("Ending the string using a nullish character in the literal is NOT recommended! You should use the end of the string literal instead!"),r.push(n),a=!1;break}r.push(n)}}else for(let a=0;a!==t;a++,a>>>=0){if(n=e.charCodeAt(a)>>>0,n>s)throw new TypeError("Found a character outside of the UTF8 range: '"+e[a]+"'. If you need to use a character outside of the UTF8 range, please use the [UTF16STRING] type.");r.push(n)}a&&r.push(0),d=0,y=0}else if(8===y){const e=l[u];if(void 0===e)throw new TypeError("If you want to know how to use [UTF16STRING] or [UTF8STRING], here is how you encountered this error:\nThe type would usually expect a setting that determines whether the string would allow backslash characters on numbers (e.g. \\0, \\1, etc.), and that setting can be rerpesented as either 'TRUE', or 'FALSE', without single quotes, respectively. And lastly\n\nUnexpected token '"+u+"'");f=e,y-=2}else if(10===y){const e="TRUE"===u;e||"FALSE"===u?r.push(e>>>0):(console.warn("Only two values (TRUE, FALSE) can be represented. The value that is represented was "+u+". Defaulting to the FALSE boolean..."),r.push(0)),y=0,d=0}}else if(2===d){for(;"ECOM"!==u&&g!==a;)u=n[g],g++;d=0,p++,p>>>=0}else if(3===d){for(;"\n"!==u[0]&&g!==a;)u=n[g],g++;d=0,p++,p>>>=0}if(0!==d||0!==y)throw new SyntaxError("Unexpected end of program");const U=new Uint8Array(r);return"arraybuffer"===t?U.buffer:"array"===t?r:U};
